#
# Commit / Reveal Entropy Contract
#
# this contract allows for a stream of random numbers to be made available to
# third party contracts (ie games).  entropy provides can commit a random
# value, which they have to reveal in a number of blocks (otherwise they lose
# their deposit)
#

# TODO
# - review algorithms for random seed and hash chain

data ticket_count
data tickets[2^50](owner, status, target, random)
# requested entropy is tied to tickets. there can be multiple tickets per
# block. random value for each ticket are generated from a hashchain based on
# the random seed of the block

data blocks[2^50](seed, commit_count, reveal_count, ticket_count, commits[2^20](sender, hash, value), committers[2^160], tickets[2^20])
# commits are made per block. reveal required to get deposit back.

def shared():
    REVEAL_WINDOW = 2  # time in which reveals are accepted
    QUIET_WINDOW = 1  # time between last commit and first reveal
    ENTROPY_COST = 10 ** 15  # cost of one piece of entropy
    DEPOSIT_COST = 10 ** 18  # how much ETH it will cost to deposit

# Request a future piece of entropy.
# There is a cost associated with this, which will be distributed among the
# committers.
#
# Returns:
# ticket_id - the ID of your entropy ticket, used for future reference
# block_eta - the block number after which your entropy will be available
# or 0 if the required cost wasn't met.
def request_entropy():
    if msg.value < ENTROPY_COST:
        return([0]:arr)  # insufficient fee

    target = block.number + 1

    # initialize ticket
    ticket_id = self.ticket_count
    self.tickets[ticket_id].owner = msg.sender
    self.tickets[ticket_id].target = target
    self.ticket_count = ticket_id + 1

    # add ticket to target block
    ticket_idx = self.blocks[target].ticket_count
    self.blocks[target].tickets[ticket_idx] = ticket_id
    self.blocks[target].ticket_count = ticket_idx + 1

    eta = target + QUIET_WINDOW + REVEAL_WINDOW

    # return ticket_id and eta
    return([ticket_id, eta]:arr)

# Get your entropy
#
# Parameter:
# ticket_id - the ID of your entropy ticket
#
# Returns:
# status - 0 = pending | 1 = ready | 2 = expired | 3 = not yours / not found
# entropy - your random number
def get_entropy(ticket_id):
    if msg.sender != self.tickets[ticket_id].owner:
        return([3, 0]:arr)  # not yours / not found

    status = self.tickets[ticket_id].status
    if status == 1:
        return([1, self.tickets[ticket_id].random]:arr)  # ready
    else:
        if block.number > self.tickets[ticket_id].target + REVEAL_WINDOW:
            return([2, 0]:arr)  # expired
        else:
            return([0, 0]:arr)  # pending

# Returns entropy ticket as-is
#
# Parameter:
# ticket_id - the ID of your entropy ticket
def get_entropy_ticket(ticket_id):
    return([self.tickets[ticket_id].owner, self.tickets[ticket_id].status, self.tickets[ticket_id].target, self.tickets[ticket_id].random]:arr)

# Commit your random contribution to a future block
# There is a deposit cost associated with this, which will be returned upon
# successful revealing.
#
# Parameters:
# target - the block number that you want to contribute entropy towards
# hash - the SHA3 hash of your entropy
#
# Returns:
# 0 on error
# 1 on success
#
# XXX how many blocks in the future could you be allowed to commit to?
def commit(target, hash):
    if msg.value < DEPOSIT_COST:
        return(0)  # insufficient deposit

    if target <= block.number:
        return(0)  # block no longer available

    if hash == 0:
        return(0)  # invalid hash

    if self.blocks[target].committers[msg.sender] != 0:
        return(0)  # you have already committed

    # store hash on list
    commit_idx = self.blocks[target].commit_count
    self.blocks[target].commits[commit_idx].sender = msg.sender
    self.blocks[target].commits[commit_idx].hash = hash
    self.blocks[target].commit_count = commit_idx + 1

    # store committer mapping
    self.blocks[target].committers[msg.sender] = commit_idx + 1  # add 1 to differentiate from non existing committer

    return(1)

# Reveal your entropy
#
# Parameters:
# target - the block number that you previously commited entropy towards
# value - the value belonging to the previously commited hash
#
# Returns:
# 1 on success
# 9x on error
#
# XXX cost of last reveal is substantially higher
def reveal(target, value):

    if target + QUIET_WINDOW > block.number:
        return(90)  # not yet allowed to reveal

    if block.number > target + QUIET_WINDOW + REVEAL_WINDOW:
        return(91)  # reveal window expired

    commit_idx = self.blocks[target].committers[msg.sender]
    if commit_idx == 0:
        return(92)  # you don't have committed anything
    commit_idx -= 1  # compensate for 0 is non existing committer

    if self.blocks[target].commits[commit_idx].value != 0:
        return(93)  # already revealed

    hash = self.blocks[target].commits[commit_idx].hash
    if sha3(value) != hash:
        return(94)  # hash mismatch

    # all is good
    self.blocks[target].commits[commit_idx].value = value
    self.blocks[target].reveal_count += 1
    send(msg.sender, DEPOSIT_COST)  # return deposit

    commit_count = self.blocks[target].commit_count
    if commit_count == self.blocks[target].reveal_count:
        # all reveals are in!
        #
        if self.blocks[target].seed != 0:
            return(97)  # already have a seed

        # each committer gets their share of the total collected entropy cost for this block
        committer_payout = self.blocks[target].ticket_count * ENTROPY_COST / commit_count

        # calculate the random seed and do payouts to the committers
        # H(c_0 || r_0 || c_1 || r_1 || .. || c_n || r_n)
        # TODO review and improve hash chain function!
        values = array(commit_count * 2)

        c = 0
        while c < commit_count:
            values[2 * c] = self.blocks[target].commits[c].hash
            values[2 * c + 1] = self.blocks[target].commits[c].value
            send(self.blocks[target].commits[c].sender, committer_payout)
            c += 1

        seed = sha3(values, items=commit_count * 2)
        self.blocks[target].seed = seed

        # calculate randomness for individual tickets
        # R_0 = seed; R_n = H(R_n-1)
        # TODO review and improve hash chain function!
        ticket_count = self.blocks[target].ticket_count
        random = seed

        c = 0
        while c < ticket_count:
            random = sha3(random)
            ticket_id = self.blocks[target].tickets[c]
            self.tickets[ticket_id].status = 1
            self.tickets[ticket_id].random = random
            c += 1

    return(1)

# Returns block data as-is
#
# Parameter:
# target - the target block number
def get_block(target):
    return([self.blocks[target].seed, self.blocks[target].commit_count, self.blocks[target].reveal_count, self.blocks[target].ticket_count]:arr)

# Calculate sha3 hash on the value, for testing purposes
def hash(value):
    return(sha3(value))
